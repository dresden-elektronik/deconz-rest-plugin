FROM --platform=$BUILDPLATFORM ubuntu:18.04 as builder

# Install required packages
RUN apt-get update \
    && apt-get install -y \
    git \
    wget \
    build-essential \
    gcc-arm-linux-gnueabihf \
    g++-arm-linux-gnueabihf \
    pkg-config \
    libgpiod-dev \
    libssl-dev

# Add cross-compile architecture
RUN dpkg --add-architecture armhf \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic main restricted" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic-updates main restricted" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic-updates universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic-updates multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list \
    && echo "deb [arch=armhf] http://ports.ubuntu.com/ bionic-backports main restricted universe multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list

# Prepare toolchain file
RUN echo "set(CMAKE_SYSTEM_NAME Linux)" >> armv7l.cmake \
    && echo "set(CMAKE_SYSTEM_PROCESSOR armv7l)" >> armv7l.cmake \
    && echo "" >> armv7l.cmake \
    && echo "set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)" >> armv7l.cmake \
    && echo "set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)" >> armv7l.cmake \
    && echo "set(CMAKE_LINKER /usr/bin/arm-linux-gnueabihf-ld)" >> armv7l.cmake \
    && echo "" >> armv7l.cmake \
    && echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> armv7l.cmake \
    && echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> armv7l.cmake \
    && echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> armv7l.cmake \
    && echo "set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)" >> armv7l.cmake

# Install required packages for target architecture
RUN apt-get update \
    || apt-get install -y \
    qt5-default:armhf \
    libqt5serialport5-dev:armhf \
    libqt5websockets5-dev:armhf \
    libssl-dev:armhf \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# We need a more current version supporting some used features
RUN wget https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.tar.gz \
    && tar -xzf cmake-3.19.8-Linux-x86_64.tar.gz \
    && mv cmake-3.19.8-Linux-x86_64 cmake

# Download and compile deconz. Build debian package
RUN git clone https://github.com/dresden-elektronik/deconz.git \
    && cd deconz \
    && git submodule update --init --recursive \
    && /cmake/bin/cmake -DBUILD_CHANNEL=${BUILD_CHANNEL} -DQT_VERSION_MAJOR=5 -DCMAKE_TOOLCHAIN_FILE=/armv7l.cmake -DCMAKE_BUILD_TYPE=Release -B build . \
    && /cmake/bin/cmake --build build --parallel 4 \
    && cd build \
    && /cmake/bin/cpack -G DEB -D CPACK_DEBIAN_PACKAGE_ARCHITECTURE="armhf" .

FROM scratch
COPY --from=builder /deconz/build/*.deb ./
